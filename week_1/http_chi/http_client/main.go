package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"

	"github.com/brianvoe/gofakeit/v7"

	"github.com/yyunoshev/yyunoshev_go/week_1/http_chi/pkg/models"
)

const (
	serverURL         = "http://localhost:8083"
	weatherAPIPath    = "/api/v1/weather/%s"
	contentTypeHeader = "Content-Type"
	contentTypeJSON   = "application/json"
	requestTimeout    = 5 * time.Second
	defaultCityName   = "Moscow"
	defaultMinTemp    = -10
	defaultMaxTemp    = 40
)

var httpClient = &http.Client{
	Timeout: requestTimeout,
}

func getWeather(ctx context.Context, city string) (*models.Weather, error) {
	req, err := http.NewRequestWithContext(
		ctx,
		http.MethodGet,
		fmt.Sprintf("%s"+weatherAPIPath, serverURL, city),
		nil,
	)
	if err != nil {
		// TODO: –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è %v –æ—Ç %w ?
		return nil, fmt.Errorf("–°–æ–∑–¥–∞–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–°–æ–∑–¥–∞–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer func() {
		// TODO: err –∏–ª–∏ –≤—Å–µ —Ç–∞–∫–∏ cell, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ?
		err := resp.Body.Close()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %v\n", err)
			return
		}
	}()

	if resp.StatusCode == http.StatusNotFound {
		return nil, nil
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("—á—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ (—Å—Ç–∞—Ç—É—Å %d): %s", resp.StatusCode, string(body))
	}

	var weather models.Weather
	err = json.Unmarshal(body, &weather)
	if err != nil {
		return nil, fmt.Errorf("–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON: %w", err)
	}
	return &weather, nil
}

// updateWeather –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
func updateWeather(ctx context.Context, city string, weather *models.Weather) (*models.Weather, error) {
	// –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ JSON
	jsonData, err := json.Marshal(weather)
	if err != nil {
		return nil, fmt.Errorf("–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	req, err := http.NewRequestWithContext(
		ctx,
		http.MethodPut,
		fmt.Sprintf("%s"+weatherAPIPath, serverURL, city),
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		return nil, fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ PUT-–∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	req.Header.Set(contentTypeHeader, contentTypeJSON)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PUT-–∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer func() {
		cerr := resp.Body.Close()
		if cerr != nil {
			log.Printf("–æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %v\n", cerr)
			return
		}
	}()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("—á—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ (—Å—Ç–∞—Ç—É—Å %d): %s", resp.StatusCode, string(body))
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var updatedWeather models.Weather
	err = json.Unmarshal(body, &updatedWeather)
	if err != nil {
		return nil, fmt.Errorf("–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON: %w", err)
	}

	return &updatedWeather, nil
}

// generateRandomWeather —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
func generateRandomWeather() *models.Weather {
	return &models.Weather{
		Temperature: gofakeit.Float64Range(defaultMinTemp, defaultMaxTemp),
	}
}

func main() {
	ctx := context.Background()

	log.Println("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ ===")
	log.Println()

	// 1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ (–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç)
	log.Printf("üå¶Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ %s\n", defaultCityName)
	log.Println("===================================================")

	weather, err := getWeather(ctx, defaultCityName)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	log.Printf("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ %s: %+v\n", defaultCityName, weather)

	// 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
	log.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ %s\n", defaultCityName)
	log.Println("=====================================================")

	newWeather := generateRandomWeather()

	updatedWeather, err := updateWeather(ctx, defaultCityName, newWeather)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: %v\n", err)
		return
	}
	log.Printf("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: %+v\n", updatedWeather)

	// 3. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
	log.Printf("üå¶Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ %s\n", defaultCityName)
	log.Println("===========================================================")

	weather, err = getWeather(ctx, defaultCityName)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: %v\n", err)
		return
	}

	if weather == nil {
		log.Printf("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n")
		return
	}

	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: %+v\n", weather)
	log.Println("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
}
